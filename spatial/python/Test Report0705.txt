This file reports the test on code "filter.py"
The code tooks 11 unique scenes, and each scene has 4 bands (R,G,B,NIR).  Each band is a tif image. So, there are totally 44 tif images.  The output are cloud and shadow related images (see below)in tif format, and then converted into .rst for visualization sake in Terrset.


-----------input--------------------
The code test took 11 unique scenes, and each scene has 4 tif images (R, G, B, NIR), which convered from .rst format.
------------------------------------

------------Out put------------------------------
The test output including max_image, min_image,max_image_7x7, min_image7x7, shadow, cloud, land,shadow_masked, and shadow cloud.

max_image -- the composited max image from R,G,B,NIR
min_image -- the composited min image from R,G,B,NIR
max_image_7x7 -- applied a 7x7 max filter on max_image
min_image7x7 -- applied a 7x7 min filter on min_image
shadow -- the pixels that below the threhold 2000 in max_image_7x7
cloud -- the pixels that above the threshold 4000 in min)image_7x7
land -- the pixels that above the threshold of 1000 on NIR; it is a boolean image
shadow_masked -- shadow image masked by land image
shadow cloud -- a image that combines shadow and cloud. shadow =1, cloud =2.
-------------------------------------------

------------analysis-----------------------------
1.The shadow was visually welly extracted using 2000 as threshold. The code miss identified water as shadow in img6 due to higher DN value (above 1000) of the water 
2.The cloud was underestimated in all image except in img1, by using 4000 as absolute threshold.
3.The land was visually welly extracted except in img3, which the shadow has DN value lower than 1000 in NIR; failed to identify the water due to its high DN (above 1000) 
4.Currently the code was only extarct cloud and shadow by absolution value or percentile of the value range.  
5.If the input is going to be very large (77M per input band works fine), then the code might lead to memory error.
-------------------------------------------------

-----------potential solution-------------------
1. add a percentile threshold choice.  Percentile means, e.g., the 20% pixels that have the highest of the DN value.
2. use a method that use image block to process the image, therefore avoid hit memory limite.